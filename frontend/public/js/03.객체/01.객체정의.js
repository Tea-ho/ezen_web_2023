/*
	JAVA / JS 객체 지향 언어
	객체 지향 언어[ Object-Oriented Programming, OOP ]
	
	1. 메모리 / 저장소
	 1) 변수: let 변수명 = 데이터 [ 데이터 1개 저장 ]
	 2) 상수: const 상수명 = 데이터 [ 데이터 1개 저장 ] 
	 3) 배열: let 배열명 = [] [ 데이터 1개 이상 저장 ]
	 	*서로 다른 데이터 유형을 한번에 저장할 경우, 식별하기 힘들다는 문제점이 있음 (객체를 활용하여 문제점 해결)
	
	2. 객체[ object ]
	 1) 사용 목적: 서로 다른 데이터유형(속성)을 한번에 저장하기 위함
	 
	 2) 형태: let 객체명 = { 속성명: 데이터, 속성명: 데이터, 속성명: 데이터 }
	 
	 3) 선언: 회원 = { ID: 'qweqwe', PW: '123', Name: '김태호' }
	  Tip> 속성명: 데이터, 변수, 상수, 배열, 함수, 객체 
	  
	 4) 객체 호출
	  (1) 객체 모든 정보 호출 시, 객체명
	  (2) 객체 정보 중 일부 호출, 객체명.속성명
	   Tip> 접근연산자: .
	   
	 5) 객체 속성 추가
	  객체명.새로운속성명 = 데이터
	 
	 6) 객체 속성 제거
	  delete 객체명.속성명
	  
	 7) 객체 속성값 변경
	  객체명.속성명 = 변경데이터
	  
	 2) 속성[필드]:  
	 3) 동작[메소드]: 

*/

console.log('연동 확인');

// 1. 객체 선언: 서로 다른 유형의 데이터 식별이 용이하다.
let 객체1 = { ID: 'hoky', PW: '1234', Name: '김태호' }
console.log( 객체1 )

let 배열1 = [ 'hoky', '1234', '김태호' ]
console.log( 배열1 )

// 2. 객체 호출
console.log( 객체1 ) // 객체 모든 정보 호출
console.log( 객체1.ID ) // 객체 정보 중 ID 정보 호출

console.log( 배열1[0] )

// 3. 객체 속성 추가
객체1.Address = "안산시 상록구"
console.log( 객체1 )

객체1.PhoneNum = "010-xxxx-xxxx"

// 4. 객체 속성 제거
delete 객체1.Address;
console.log( 객체1 )

// 5. 속성값 변경
객체1.PW = '789';
console.log( 객체1 )

// 6. 객체, 배열 활용 (특징: 배열안에 객체 저장 가능, 객체 안에도 배열 저장 가능)
// 6-1. 배열안에 여러개의 객체를 저장하는 경우 (상황: 동일한 유형의 객체를 여러개 생성해야하는 경우)
let 게시물1 = { Tittle: 'Game1', Content: 'Hun-hee likes game' }
let 게시물2 = { Tittle: 'Game2', Content: 'Hun-hee loves game' }

let 게시물배열 = [ 게시물1, 게시물2 ]

let 공지사항 = {
	게시판이름 : '공지사항', 게시물목록: 게시물배열
}