// console.log("1. 연동 확인")

// 배열선언 [ 버튼의 상태를 저장하는 배열 ]
let 버튼목록현황 = [null, null, null, null, null, null, null, null, null]

// 1. 클릭 이벤트 함수 생성 (기능: )
function 클릭이벤트( 버튼번호 ) {
		// console.log('2. 클릭함수 실행 확인' + 버튼번호)
	
	if( ! 알두기( 버튼번호, 'O' ) ) { return; } // 'p'
	// 해석: 조건에 부합하면 클릭이벤트 함수 밖으로 나감
	// !: 부정 (false->true)
	
	if( 결과() ) { return; }
	
	
	while( true ) {
	// 해석: 무한루프[정상적으로 알 둘 때까지 아래 실행문 반복]
	
		let 컴퓨터번호 = parseInt( Math.random()*9 )+1
		// 해석: 변수 컴퓨터번호 생성 (입력값: 1~9 사이 난수)
		
		if ( 알두기( 컴퓨터번호, 'X' ) ){ 결과(); return; } // 'c'
		// 해석: 조건에 부합하면 클릭이벤트 함수 밖으로 나감
	}
}

// 2. 알두기 함수 생성 (기능: )
function 알두기( 버튼번호 , 알모양 ){

	let 버튼목록 = document.querySelectorAll('.버튼')
	// 해석: <div> 버튼 목록 자져와서 JS 배열에 저장
	// querySelectorAll 이용하여 관련된 데이터 모두 호출
	
		// console.log( 버튼목록 )	
	
	// 유효성 검사	
	if( 버튼목록현황[버튼번호-1] != null ){
	// 해석: 조건에 부합하면 아래 실행 (기능1: 메시지 생성, 기능2: fasle 반환)
			//alert('이미 알이 존재하는 자리입니다.');
		return false;
	}
	
	버튼목록[버튼번호-1].innerHTML = 알모양;
	// 해석: HTML과 연동한 class 버튼에 플레이어(o,x) 표기 반영(목적: 화면 출력) 
	
	버튼목록현황[버튼번호-1] = 알모양;
	// 해석: 배열 버튼목록현황 상태 변경(목적: 중복 검사 및 승패 판단을 위함)
	
	
		/*
		if(플레이어 == 'p') {
			// 3. 클릭했을 때, 화면 상태 변경 
			버튼목록[버튼번호-1].innerHTML = 'O';
			// 5. 배열 상태 변경 (승리자 판단을 위해 사용할 예정)
			버튼목록현황[버튼번호-1] = 'O';
		}
		
		if(플레이어 == 'c') {
			// 3. 클릭했을 때, 화면 상태 변경 
			버튼목록[버튼번호-1].innerHTML = 'X';
			// 5. 배열 상태 변경 (승리자 판단을 위해 사용할 예정)
			버튼목록현황[버튼번호-1] = 'X';
		}
		*/
		// console.log( 버튼목록현황 )
	return true;
	// 해석: 모두 수행되었을 경우, true 반환
}

// 3. 결과 함수 생성
// 기능: 승부 판단(승,패,무)
// 실행시점: 사람 혹은 컴퓨터가 알두기 성공했을 때
function 결과(){
	
	for( let i = 0; i <= 6; i+=3){
		if( 버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+1] && 버튼목록현황[i+1] == 버튼목록현황[i+2] ){
			결과출력( 버튼목록현황[i] )
			return true;
		}
	}
	
	for( let i = 0; i <= 2; i++){
		if( 버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+3] && 버튼목록현황[i+3] == 버튼목록현황[i+6] ){
			결과출력( 버튼목록현황[i] )
			return true;
		}
	}
	
	if( 버튼목록현황[0] != null && 버튼목록현황[0] == 버튼목록현황[4] && 버튼목록현황[4] == 버튼목록현황[8] ){
		결과출력( 버튼목록현황['0'] )
		return true;
	}
	if( 버튼목록현황[2] != null && 버튼목록현황[2] == 버튼목록현황[4] && 버튼목록현황[4] == 버튼목록현황[6] ){
		결과출력( 버튼목록현황['2'] )
		return true;
	}
	
	// 무승부 판단
	let 빈자리수 = 0;
	
	for( let i = 0; i < 버튼목록현황.length; i++ ){
		if(버튼목록현황[i] == null){ 빈자리수++; }
	}
	if( 빈자리수 == 0 ) { 결과출력('-'); return true; }
	
	return false;

}

// 4. 결과출력 함수 생성 (기능: 1)승/패/무 출력, 2)게임 종료)
function 결과출력( 알모양 ){
	
	let 게임판 = document.querySelector('.게임판')
	// 해석: HTML 클래스 게임판을 JS와 연동
	
	if( 알모양 == '-'){ 게임판.innerHTML = ' 무승부 ' }
	else{ 게임판.innerHTML = 알모양 + ' 승리 ' }
	// 해석: 매개변수 알모양 값이 '-'인 경우, 무승부를 HTML 화면에 출력,
	// 		매개변수 값이 (o or x)이면, '알모양 승리'를 HTML 화면에 출력
}
